/*
 * Copyright 2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.xd.shell.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.core.env.Environment;
import org.springframework.core.env.MapPropertySource;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;
import org.springframework.xd.dirt.module.ModuleRegistry;
import org.springframework.xd.dirt.module.ResourceModuleRegistry;
import org.springframework.xd.module.ModuleDefinition;
import org.springframework.xd.module.ModuleType;
import org.springframework.xd.module.options.DefaultModuleOptionsMetadataResolver;
import org.springframework.xd.module.options.ModuleOption;
import org.springframework.xd.module.options.ModuleOptionsMetadata;
import org.springframework.xd.module.options.ModuleOptionsMetadataResolver;
import org.springframework.xd.module.options.spi.ModulePlaceholders;


/**
 * Quick and dirty class that generates asciidoc snippets for each module's options.
 * 
 * <p>For each file passed as an argument, will replace parts of the file (inplace) in between {@code //^<type>.<name>} 
 * and {@code //$<type>.<name>} with a generated snippet documenting options. Those start and end fences are copied as-is,
 * so that a subsequent run regenerates uptodate doco.
 * </p>
 * 
 * @author Eric Bottard
 */
public class ModuleOptionsReferenceDoc {

	/**
	 * Matches "//^<type>.<name>" exactly.
	 */
	private static final Pattern FENCE_START_REGEX = Pattern.compile("^//\\^([^.]+)\\.([^.]+)$");

	@Autowired
	private ModuleRegistry moduleRegistry;

	@Autowired
	private ModuleOptionsMetadataResolver moduleOptionsMetadataResolver;

	private void run(String path) throws IOException {
		File originalFile = new File(path);
		Assert.isTrue(originalFile.exists() && !originalFile.isDirectory(),
				String.format("'%s' does not exist or points to a directory", originalFile.getAbsolutePath()));

		File backup = new File(originalFile.getAbsolutePath() + ".backup");
		originalFile.renameTo(backup);
		BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(backup), "UTF-8"));

		PrintStream out = new PrintStream(new FileOutputStream(originalFile), false, "UTF-8");

		ModuleType type = null;
		String name = null;
		int openingLineNumber = 0;
		int ln = 1;
		for (String line = reader.readLine(); line != null; line = reader.readLine(), ln++) {
			Matcher startMatcher = FENCE_START_REGEX.matcher(line);
			if (startMatcher.matches()) {
				type = ModuleType.valueOf(startMatcher.group(1));
				name = startMatcher.group(2);
				openingLineNumber = ln;
				out.println(line);
			}
			else if (type != null && line.equals(String.format("//$%s.%s", type, name))) {
				generateWarning(out, name, type);
				generateAsciidoc(out, name, type);
				type = null;
				name = null;
				out.println(line);
			}
			else if (type == null) {
				out.println(line);
			}
		}
		if (type != null) {
			out.close();
			originalFile.delete();
			backup.renameTo(originalFile);
			throw new IllegalStateException(String.format(
					"In %s, found '//^%s.%s' @line %d with no matching '//$%2$s.%3$s'",
					originalFile.getAbsolutePath(), type, name, openingLineNumber));
		}

		out.close();
		reader.close();

		backup.delete();


	}

	private void generateWarning(PrintStream out, String name, ModuleType type) {
		out.format("// DO NOT MODIFY THE LINES BELOW UNTIL THE CLOSING '//$%s.%s' TAG%n", type, name);
		out.format("// THIS SNIPPET HAS BEEN GENERATED BY %s AND MANUAL EDITS WILL BE LOST%n",
				ModuleOptionsReferenceDoc.class.getSimpleName());
	}

	private void generateAsciidoc(PrintStream out, String name, ModuleType type)
			throws IOException {
		ModuleDefinition def = moduleRegistry.findDefinition(name, type);
		ModuleOptionsMetadata moduleOptionsMetadata = moduleOptionsMetadataResolver.resolve(def);

		out.format("The **%s** %s has the following options:%n%n", def.getName(), def.getType());
		List<ModuleOption> options = new ArrayList<ModuleOption>();
		for (ModuleOption mo : moduleOptionsMetadata) {
			options.add(mo);
		}
		Collections.sort(options, new Comparator<ModuleOption>() {

			@Override
			public int compare(ModuleOption o1, ModuleOption o2) {
				return o1.getName().compareTo(o2.getName());
			}
		});

		for (ModuleOption mo : options) {
			String prettyDefault = prettyfyDefaultValue(mo);
			String maybeEnumHint = maybeEnumHint(mo);
			out.format("%s:: %s *(%s, %s%s)*%n", mo.getName(), mo.getDescription(), mo.getType().getSimpleName(),
					prettyDefault, maybeEnumHint);
		}
	}

	/**
	 * When the type of an option is an enum, document all possible values
	 */
	private String maybeEnumHint(ModuleOption mo) {
		if (Enum.class.isAssignableFrom(mo.getType())) {
			String values = StringUtils.arrayToCommaDelimitedString(mo.getType().getEnumConstants());
			return String.format(", possible values: `%s`", values);
		}
		else
			return "";
	}

	private String prettyfyDefaultValue(ModuleOption mo) {
		String result = mo.getDefaultValue() == null ? "no default" : String.format("default: `%s`",
				mo.getDefaultValue());
		result = result.replace(ModulePlaceholders.XD_STREAM_NAME, "<stream name>");
		result = result.replace(ModulePlaceholders.XD_JOB_NAME, "<job name>");
		return result;
	}

	public static void main(String... paths) throws IOException {

		AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(
				ModuleOptionsReferenceDoc.Config.class);

		ModuleOptionsReferenceDoc runner = applicationContext.getBean(ModuleOptionsReferenceDoc.class);
		for (String path : paths) {
			runner.run(path);
		}
		applicationContext.close();
	}

	@Configuration
	public static class Config {

		@Autowired
		public void setEnvironment(Environment environment) {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("xd.config.home", "file:./config");
			((ConfigurableEnvironment) environment).getPropertySources().addFirst(new MapPropertySource("foo", map));
		}

		@Bean
		public ModuleRegistry moduleRegistry() {
			return new ResourceModuleRegistry("file:./modules");
		}

		@Bean
		public ModuleOptionsMetadataResolver moduleOptionsMetadataResolver() {
			return new DefaultModuleOptionsMetadataResolver();
		}

		@Bean
		public ModuleOptionsReferenceDoc runner() {
			return new ModuleOptionsReferenceDoc();
		}

	}


}
