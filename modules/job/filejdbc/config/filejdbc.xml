<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">

	<batch:job id="filejdbc" restartable="${restartable}">
		<batch:step id="readResourcesStep">
			<batch:tasklet>
				<batch:chunk reader="multiResourceReader" writer="itemWriter" commit-interval="100"/>
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="fileDeletionListener" />
		</batch:listeners>
	</batch:job>

	<bean id="fileDeletionListener" class="org.springframework.xd.dirt.plugins.job.support.listener.FileDeletionJobExecutionListener">
		<property name="resources" value="${resources}"/>
		<property name="deleteFiles" value="${deleteFiles}"/>
	</bean>

	<bean id="multiResourceReader" class="org.springframework.batch.item.file.MultiResourceItemReader" scope="step">
		<property name="resources" value="${resources}"/>
		<property name="delegate" ref="itemReader"/>
	</bean>

	<bean id="itemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="${names}"/>
						<property name="delimiter" value="${delimiter}"/>
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="org.springframework.xd.tuple.batch.TupleFieldSetMapper"/>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
		<property name="driverClassName" value="${driverClassName}"/>
		<property name="url" value="${url}"/>
		<property name="username" value="${username}"/>
		<property name="password" value="${password}"/>
		<property name="initialSize" value="${spring.datasource.initialSize}" />
		<property name="maxActive" value="${spring.datasource.maxActive}" />
		<property name="maxIdle" value="${spring.datasource.maxIdle}" />
		<property name="minIdle" value="${spring.datasource.minIdle}"/>
		<property name="maxWait" value="${spring.datasource.maxWait}"/>
		<property name="testOnBorrow" value="${spring.datasource.testOnBorrow}"/>
		<property name="testOnReturn" value="${spring.datasource.testOnReturn}"/>
		<property name="testWhileIdle" value="${spring.datasource.testWhileIdle}"/>
		<property name="validationQuery" value="${spring.datasource.validationQuery:#{null}}"/>
		<property name="timeBetweenEvictionRunsMillis" value="${spring.datasource.timeBetweenEvictionRunsMillis}"/>
		<property name="minEvictableIdleTimeMillis" value="${spring.datasource.minEvictableIdleTimeMillis}"/>
		<property name="removeAbandoned" value="${spring.datasource.removeAbandoned}"/>
		<property name="removeAbandonedTimeout" value="${spring.datasource.removeAbandonedTimeout}"/>
		<property name="logAbandoned" value="${spring.datasource.logAbandoned}"/>
		<property name="validationInterval" value="${spring.datasource.validationInterval}"/>
		<property name="jmxEnabled" value="${spring.datasource.jmxEnabled}"/>
		<property name="fairQueue" value="${spring.datasource.fairQueue}"/>
		<property name="abandonWhenPercentageFull" value="${spring.datasource.abandonWhenPercentageFull}"/>
		<property name="maxAge" value="${spring.datasource.maxAge}"/>
		<property name="useEquals" value="${spring.datasource.useEquals}"/>
		<property name="suspectTimeout" value="${spring.datasource.suspectTimeout}"/>
		<property name="alternateUsernameAllowed" value="${spring.datasource.alternateUsernameAllowed}"/>
		<property name="validatorClassName" value="${spring.datasource.validatorClassName:#{null}}"/>
		<property name="connectionProperties" value="${spring.datasource.connectionProperties:#{null}}"/>
 		<property name="initSQL" value="${spring.datasource.initSQL:#{null}}"/>
 		<property name="jdbcInterceptors" value="${spring.datasource.jdbcInterceptors:#{null}}"/>
	</bean>

	<bean id="dataSourceInitializer" class="org.springframework.jdbc.datasource.init.DataSourceInitializer">
		<property name="databasePopulator" ref="databasePopulator"/>
		<property name="dataSource" ref="dataSource"/>
		<property name="enabled" value="${initializeDatabase}"/>
	</bean>

	<bean id="databasePopulator" class="org.springframework.xd.jdbc.SingleTableDatabaseInitializer">
		<property name="scripts" value="${xd.config.home}/${initializerScript}"/>
		<property name="ignoreFailedDrops" value="true"/>
		<property name="tableName" value="${tableName}"/>
		<property name="columnNames" value="${names}" />
	</bean>

	<bean id="itemWriter" class="org.springframework.xd.jdbc.NamedColumnJdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource"/>
		<property name="tableName" value="${tableName}" />
		<property name="columnNames" value="${names}" />
		<property name="itemSqlParameterSourceProvider">
			<bean class="org.springframework.xd.tuple.batch.TupleSqlParameterSourceProvider" />
		</property>
	</bean>

</beans>
