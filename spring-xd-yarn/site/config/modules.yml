# XD on YARN modules configuration

# Shared twitter keys that can be applied to twittersearch, twitterstream
# modules can be specified as below. These are default values unless explicit values are
# set for module config keys in the respective twitter(search/stream) source modules.

# Uncomment and set the below to activate properties that are applied to all twitter sources
#twitter:
#  consumerKey: fooconsumer123
#  consumerSecret: fooconsumersecretABC
#  accessToken: 123456789-fooaccesstoken
#  accessTokenSecret: fooaccesstokensecret

---

# Shared RabbitMQ module properties
# Shared RabbitMQ module properties that can be applied to rabbit source and sink
# modules can be specified as below. These are default values unless explicit values are
# set for module config keys in the respective rabbit (source/sink) modules.
#rabbit:
#  host: localhost
#  port: 5672
#  username: guest
#  password: guest
#  vhost: /

---

# Twitter sources configuration settings
source:
  twittersearch:
    consumerKey: ${twitter.consumerKey:}
    consumerSecret: ${twitter.consumerSecret:}
  twitterstream:
    consumerKey: ${twitter.consumerKey:}
    consumerSecret: ${twitter.consumerSecret:}
    accessToken: ${twitter.accessToken:}
    accessTokenSecret: ${twitter.accessTokenSecret:}

---

# RabbitMQ source/sink configuration settings
source:
  rabbit:
    host: ${rabbit.host:}
    port: ${rabbit.port:}
    username: ${rabbit.username:}
    password: ${rabbit.password:}
    vhost: ${rabbit.vhost:}
    # RabbitMQ queue names (as comma separated strings) that the messages are retrieved from
#    queues:

sink:
  rabbit:
    host: ${rabbit.host:}
    port: ${rabbit.port:}
    username: ${rabbit.username:}
    password: ${rabbit.password:}
    vhost: ${rabbit.vhost:}
    # Routing properties to send the messages into
    # Exchange name to use
#    exchange:
    # Routing key expression (a avalid SpEL expression)
#    routingKey:

---

# JDBC sink database settings
sink:
  jdbc:
    url: ${spring.datasource.url}
    driverClassName: ${spring.datasource.driverClassName}
    username: ${spring.datasource.username}
    password: ${spring.datasource.password}

---

# Job modules database settings
job:
  filejdbc:
    url: ${spring.datasource.url}
    driverClassName: ${spring.datasource.driverClassName}
    username: ${spring.datasource.username}
    password: ${spring.datasource.password}
  hdfsjdbc:
    url: ${spring.datasource.url}
    driverClassName: ${spring.datasource.driverClassName}
    username: ${spring.datasource.username}
    password: ${spring.datasource.password}
  jdbchdfs:
    url: ${spring.datasource.url}
    driverClassName: ${spring.datasource.driverClassName}
    username: ${spring.datasource.username}
    password: ${spring.datasource.password}
