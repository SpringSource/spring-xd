#!/bin/bash

. xdapi
#If this the first time you are running this script, please run the install_sqlite_jar and restart the XD Server
PWD=`pwd`
TEST_DIR='/tmp/xdtest/jdbc'
DB_FILE="$TEST_DIR/jdbc.db"
JDBC_PARAMS="--driverClass=org.sqlite.JDBC --url=jdbc:sqlite:$DB_FILE"

if [[ ! -f $XD_HOME/lib/sqlite-jdbc-3.7.2.jar ]]
then
  echo 'sqlite jar is missing from XD_HOME/lib. Skipping JDBC tests'
  exit 0
fi

wait_for_server

rm -R $TEST_DIR &> /dev/null

mkdir -p $TEST_DIR
set -e
echo -e "\n\n Test 1. tail | jdbc stream with pre-initialized database"

sqlite3 $DB_FILE 'create table blah (col1 varchar, col2 varchar, col3 varchar)'

create_stream jdbc1 "tail --lines=10 --name=$TEST_DIR/jdbc1.data --fileDelay=1000 | jdbc $JDBC_PARAMS --username='' --password='' --columns=col1,col2,col3 --tableName=blah" 'true'

# Add some data to the file
echo '{"col1":"x", "col2":"y", "col3":"z"}' >> $TEST_DIR/jdbc1.data
sleep 5
rows=`sqlite3 $DB_FILE 'select count(*) from blah'`
destroy_stream jdbc1
rm $TEST_DIR/jdbc1.data

echo "Checking row count in database table matches import from tail file..."
assert_equals 1 $rows
col1=`sqlite3 $DB_FILE 'select col1 from blah'`
assert_equals 'x' $col1

echo -e "\n\n Test 2. tail | jdbc stream with db initialization"

create_stream jdbc2 "tail --lines=10 --name=$TEST_DIR/jdbc2.data --fileDelay=1000 | jdbc $JDBC_PARAMS --initializeDatabase=true" 'true'

echo "blahblah" >> $TEST_DIR/jdbc2.data
sleep 3
destroy_stream jdbc2
rm $TEST_DIR/jdbc2.data

echo "Checking row count in database table matches import from tail file..."
rows=`sqlite3 $DB_FILE 'select count(*) from jdbc2'`
assert_equals 1 $rows
payload=`sqlite3 $DB_FILE 'select payload from jdbc2'`
assert_equals 'blahblah' $payload

echo -e "\n\n Test 3. Load single CSV file using filejdbc job with defaults, deleting file after import\n"
cp $PWD/csv/data.csv $TEST_DIR/delete_after_use.csv

create_job csvjdbcjob0 "filejdbc $JDBC_PARAMS --names=col1,col2,col3 --resources=file://$TEST_DIR/delete_after_use.csv --initializeDatabase=true --deleteFiles=true" 'true'
launch_job csvjdbcjob0
sleep 10
destroy_job csvjdbcjob0
rows=`sqlite3 $DB_FILE 'select count(*) from csvjdbcjob0'`
echo "Checking row count in database table matches import from file..."
assert_equals 292 $rows
sleep 5

if [[ -f $TEST_DIR/delete_after_use.csv ]]
then
  echo "Data file was not deleted"
  exit 1
fi

echo -e "\n\n Test 4. Load multiple CSV files using filejdbc jobs with table name specified\n"

create_job csvjdbcjob1 "filejdbc $JDBC_PARAMS --url=jdbc:sqlite:$DB_FILE --names=col1,col2,col3 --resources=file://$PWD/csv/data.csv --tableName=JOB_DATA_TABLE --initializeDatabase=true"
sleep 5
create_stream job1Notifications "tap:job:csvjdbcjob1.job > file --dir=$TEST_DIR" 'true'
deploy_job csvjdbcjob1
sleep 5
launch_job csvjdbcjob1
sleep 5
destroy_job csvjdbcjob1
destroy_stream job1Notifications

nJobMessages=`wc -l $TEST_DIR/job1Notifications.out`
assert_equals 2 $nJobMessages

# Load the same file again into the existing table
create_job csvjdbcjob2 "filejdbc $JDBC_PARAMS --names=col1,col2,col3 --resources=file://$PWD/csv/data.csv --tableName=JOB_DATA_TABLE --initializeDatabase=false" 'true'
sleep 5
launch_job csvjdbcjob2
sleep 5
destroy_job csvjdbcjob2
rows=`sqlite3 $DB_FILE 'select count(*) from JOB_DATA_TABLE'`
echo "Checking row count in database table matches import from file..."
assert_equals 584 $rows


echo -e "\n\n Test 5. Load single tab delimited file using filejdbc job with defaults, deleting file after import\n"
cp $PWD/csv/data.csv $TEST_DIR/delete_after_use.csv
sed 's/\,/	/g' $TEST_DIR/delete_after_use.csv > $TEST_DIR/delete_after_use_tabs.csv

create_job csvjdbcjob0 "filejdbc $JDBC_PARAMS --names=col1,col2,col3 --resources=file://$TEST_DIR/delete_after_use_tabs.csv --initializeDatabase=true --deleteFiles=true --delimiter=\\t" 'true'
launch_job csvjdbcjob0
sleep 5
rows=`sqlite3 $DB_FILE 'select count(*) from csvjdbcjob0'`
destroy_job csvjdbcjob0
echo "Checking row count in database table matches import from file..."
assert_equals 292 $rows
sleep 5

if [[ -f $TEST_DIR/delete_after_use_tabs.csv ]]
then
  echo "Tabbed data file was not deleted"
  exit 1
fi

rm -R $TEST_DIR/delete_after_use.csv &> /dev/null

echo -e '\nAll good :-)'


commas_to_tabs() {
	case "$OSTYPE" in
	  darwin*)  echo "OSX" ;;
	  linux*)   echo "LINUX" ;;
	  bsd*)     echo "BSD" ;;
	esac

	if [ os == "OSX"]
	then
		sed 's/\,/	/g' $1 > $2
	else
		sed 's/\,/\t/g' $1 > $2
	fi
}
